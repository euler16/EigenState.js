import * as math from 'mathjs';
import { Gate } from './Gates';
declare class QuantumCircuit {
    static basicGates: object;
    numQubits: number;
    params: object;
    customGates: object;
    cregs: any;
    collapsed: number[];
    prob: number[];
    gates: Gate[][];
    state: any;
    stateBits: number;
    stats: object;
    constructor(numQubits?: number);
    clear(): void;
    resetState(): void;
    initState(): void;
    numAmplitudes(): math.MathType;
    numCols(): number;
    numGates(decompose: boolean): number;
    isEmptyCell(col: number, wire: number): boolean;
    lastNonEmptyPlace(wires: number[], usingCregs: boolean): number;
    addGate(gateName: string, column: number, wires: number | number[], options: any): void;
    removeGate(column: number, wire: number): void;
    addMeasure(wire: number, creg: string, cbit: any): void;
    applyTransform(U: any, qubits: any): void;
    applyGate(gateName: string, wires: number[], options: any): void;
    getRawGate(gate: any, options: any): any[];
    decompose(obj: any): any;
    usedGates(): string[];
    getGateDef(name: string): any;
    save(decompose: boolean): object;
    load(obj: any): void;
    registerGate(name: string, obj: any): void;
    getGateAt(column: number, wire: number): any;
    exportQASM(comment: string, decompose: boolean, exportAsGateName: any): string;
    importQASM(input: any, errorCallback: any): void;
    exportPyquil(comment: string, decompose: boolean, exportAsGateName: any, versionStr?: string): string;
    exportQuil(comment: string, decompose: boolean, exportAsGateName: any, versionStr?: string): string;
    exportSVG(embedded: boolean): string;
    run(initialValues: any, options: any): void;
    test(name: any, gates: any, expectedState: any): boolean;
    stateAsString(onlyPossible: any): string;
    print(onlyPossible: any): void;
    createCreg(creg: any, len: any): void;
    setCregBit(creg: any, cbit: any, value: any): void;
    getCregBit(creg: any, cbit: any): any;
    cregBase(creg: any): number;
    cregTotalBits(): number;
    getCregValue(creg: any): number;
    measureAll(force: any): number[];
    measure(wire: any, creg: any, cbit: any): number;
    probabilities(): number[];
    probability(wire: number): number;
}
export = QuantumCircuit;
